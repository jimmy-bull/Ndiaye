{"version":3,"sources":["../../src/filters/ColorOverlay.js"],"names":["ColorOverlay","ShadersFunctions","shaders","Shaders","create","frag","GLSL","Mix","ClampRGBVec3","DefaultValue","factor","t","children"],"mappings":"o1BA6BwBA,Y,yJA1BZC,gB,2ZAENC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BJ,aAAc,CACZK,QAAMC,aAAN,kBAOIL,iBAAiBM,GAPrB,CAQIN,iBAAiBO,YARrB,CADY,CADe,CAAf,C,CAsBHC,kCAAe,CAAC,CAAD,CAAK,CAAL,CAAS,CAAT,CAAa,CAAb,C,CAEb,QAAST,aAAT,GAGZ,SAFDU,MAEC,CAFDA,CAEC,YAFQD,YAER,GADSE,CACT,GADDC,QACC,CACD,MACE,+BAAC,aAAD,EACE,OAAQV,QAAQF,YADlB,CAEE,SAAU,CACRU,QADQ,CAERC,GAFQ,CAFZ,EAQH","file":"ColorOverlay.js","sourcesContent":["import { Shaders, Node, GLSL } from 'gl-react';\nimport React from 'react';\n\nimport * as ShadersFunctions from '../utils/shaders-functions';\n\nconst shaders = Shaders.create({\n  ColorOverlay: {\n    frag: GLSL` \n      precision highp float;\n\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform vec4 factor;\n      \n      ${ShadersFunctions.Mix}\n      ${ShadersFunctions.ClampRGBVec3}\n\n      void main() {\n        vec4 c = texture2D(t, uv);\n\n        vec3 passedColor = ClampRGBVec3(factor.rgb);\n        gl_FragColor = vec4(Mix(c.rgb, passedColor, factor.a), 1.0);\n      }\n    `\n  }\n});\n\nexport const DefaultValue = [.0, .0, .0, .0];\n\nexport default function ColorOverlay({\n  factor = DefaultValue,\n  children: t\n}) {\n  return (\n    <Node\n      shader={shaders.ColorOverlay}\n      uniforms={{\n        factor,\n        t,\n      }}\n    />\n  )\n}\n"]}